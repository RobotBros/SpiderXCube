C51 COMPILER V9.55   HAL_USB                                                               10/17/2016 12:49:44 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE HAL_USB
OBJECT MODULE PLACED IN .\build\hal_usb.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\hal\nrf24lu1p\hal_usb.c LARGE OBJECTADVANCED OPTIMIZE(8,SPEED) REG
                    -FILE(.\build\usb_hid_rf.ORC) BROWSE NOINTPROMOTE INCDIR(..\..\hal;..\..\hal\nrf24l01p;..\..\hal\nrf24lu1p;..\..\compiler
                    -\c51;..\..\compiler\common;..\common) PRINT(.\list\hal_usb.lst) TABS(2) OBJECT(.\build\hal_usb.obj)

line level    source

   1          /* Copyright (c) 2009 Nordic Semiconductor. All Rights Reserved.
   2           *
   3           * The information contained herein is confidential property of Nordic 
   4           * Semiconductor ASA.Terms and conditions of usage are described in detail 
   5           * in NORDIC SEMICONDUCTOR STANDARD SOFTWARE LICENSE AGREEMENT. 
   6           *
   7           * Licensees are granted free, non-transferable use of the information. NO
   8           * WARRENTY of ANY KIND is provided. This heading must NOT be removed from
   9           * the file.
  10           *              
  11           * $LastChangedRevision: 2378 $
  12           */
  13          
  14          /** @file
  15          * @brief Implementaion of the USB HAL
  16           */
  17          #include "nrf24lu1p.h"
  18          #include <stdint.h>
  19          #ifdef __ICC8051__
              #include <intrinsics.h>
              #endif
  22          #ifdef __C51__
  23          #include <intrins.h>
  24          #endif
  25          
  26          #include "nordic_common.h"
  27          #include "hal_usb_desc.h"
  28          #include "usb.h"
  29          #include "hal_delay.h"
  30          
  31          
  32          #define ALLOCATE_USB_MAP
  33          #include "usb_map.h"
  34          
  35          // Define formulas for jumping in the usb registry map based upon the endpoint number
  36          
  37          // Calculate control and status register location in USB-controller
  38          #define CALCULATE_CS_IN_PTR(ep) (uint8_t xdata*)(&in1cs + 2 * ((ep & 0x7f) - 1 ))
  39          #define CALCULATE_CS_OUT_PTR(ep) (uint8_t xdata*)(&out1cs + 2 * ( (ep & 0x7f) - 1 ))
  40          
  41          // Calculate byte count register location in USB-controller
  42          #define CALCULATE_BC_OUT_PTR(ep) (uint8_t xdata *)(&out0bc + (ep * 2 ))
  43          #define CALCULATE_BC_IN_PTR(ep) (uint8_t xdata *)(&in0bc + ((ep & 0x7f ) * 2))
  44          
  45          // Calculate buffer location in USB-controller
  46          #define CALCULATE_BUF_IN_PTR(ep) (uint8_t xdata *)(in0buf - (( ep & 0x7f) * 128))
  47          #define CALCULATE_BUF_OUT_PTR(ep) (uint8_t xdata *)(out0buf - (ep * 128 ))
  48          
  49          static packetizer_t i_packetizer;
  50          static hal_usb_cb_endpoint_t i_endpoint_in_isr[USB_ENDPOINT_IN_COUNT];
  51          static hal_usb_cb_endpoint_t i_endpoint_out_isr[USB_ENDPOINT_OUT_COUNT];
  52          
  53          static hal_usb_device_req req;
C51 COMPILER V9.55   HAL_USB                                                               10/17/2016 12:49:44 PAGE 2   

  54          hal_usb_t volatile g_hal_usb;
  55          static uint8_t stall_data_size0;
  56          
  57          void hal_usb_init(bool usb_disconnect, hal_usb_cb_device_req_t device_req, hal_usb_cb_reset_t reset, hal_u
             -sb_cb_resume_t resume, hal_usb_cb_suspend_t suspend)
  58          {
  59   1        // Setup descriptors
  60   1        g_hal_usb.descs.dev = &g_usb_dev_desc;
  61   1        g_hal_usb.descs.conf = &g_usb_conf_desc;
  62   1        g_hal_usb.descs.string = &g_usb_string_desc;
  63   1      
  64   1        // This is for setting language American English (String descriptor 0 is an array of supported languages
             -)
  65   1        g_hal_usb.descs.string_zero[0] = 0x04;
  66   1        g_hal_usb.descs.string_zero[1] = 0x03;
  67   1        g_hal_usb.descs.string_zero[2] = 0x09;
  68   1        g_hal_usb.descs.string_zero[3] = 0x04;
  69   1      
  70   1        // Setup state information
  71   1        g_hal_usb.state = DEFAULT;
  72   1        g_hal_usb.bm_state = 0;
  73   1        stall_data_size0 = 0;
  74   1      
  75   1        // Setconfig configuration information
  76   1        g_hal_usb.current_config = 0;
  77   1        g_hal_usb.current_alt_interface = 0;
  78   1      
  79   1        // Setup callbacks
  80   1        g_hal_usb.device_req = device_req;
  81   1        g_hal_usb.reset = reset;
  82   1        g_hal_usb.resume = resume;
  83   1        g_hal_usb.suspend = suspend;
  84   1      
  85   1        // Disconnect from USB-bus if we are in this routine from a power on and not a soft reset
  86   1        if(usb_disconnect)
  87   1        {
  88   2          usbcs |= 0x08; // disconnect
  89   2          delay_ms(50);
  90   2          usbcs &= ~(0x08); // connect
  91   2        }
  92   1      
  93   1        // Setup interrupts
  94   1        USBWU = 1; // USBWU is mapped to IEN1.3
  95   1        USB = 1; // USBIRQ is mapped to IEN1.4
  96   1      
  97   1        usbien = 0x1d; // ibnie -5 4 - uresir 3 - suspir, 0 - sudavir
  98   1      
  99   1        in_ien = 0x01;
 100   1        in_irq = 0x1f;
 101   1        out_ien = 0x01;
 102   1        out_irq = 0x1f;
 103   1      
 104   1        // Setup the USB RAM with some OK default values. Note that isochronos is not set up yet.
 105   1        bout1addr = 16;
 106   1        bout2addr = 32;
 107   1        bout3addr = 48;
 108   1        bout4addr = 64;
 109   1        bout5addr = 80;
 110   1      
 111   1        binstaddr = 0xc0;
 112   1        bin1addr = 16;
 113   1        bin2addr = 32;
C51 COMPILER V9.55   HAL_USB                                                               10/17/2016 12:49:44 PAGE 3   

 114   1        bin3addr = 48;
 115   1        bin4addr = 64;
 116   1        bin5addr = 80;
 117   1      
 118   1        // Set all endpoints to not valid (except EP0IN and EP0OUT)
 119   1        inbulkval = 0x01;
 120   1        outbulkval = 0x01;
 121   1        inisoval = 0x00;
 122   1        outisoval = 0x00;
 123   1      }
 124          
 125          void hal_usb_endpoint_stall(uint8_t ep_num, bool stall)
 126          {
 127   1        uint8_t temp;
 128   1        uint8_t xdata *cs_ptr;
 129   1      
 130   1        temp = 2 * ((ep_num & 0x7f) - 1);
 131   1      
 132   1        // Calculate register address
 133   1        if((ep_num & 0x80 ) == 0x80) // IN endpoints
 134   1        {
 135   2          // Calculate control and status register for IN endpoint
 136   2          cs_ptr = (uint8_t xdata*)(&in1cs + temp);
 137   2        }
 138   1        else // OUT endpoints
 139   1        {
 140   2          // Calculate control and status register for OUT endpoint
 141   2          cs_ptr = (uint8_t xdata*)(&out1cs + temp);
 142   2        }
 143   1      
 144   1        if(stall == true)
 145   1        {
 146   2          // Set the stall bit
 147   2          *cs_ptr = 0x01;
 148   2        }
 149   1        else
 150   1        {
 151   2          // Clear the stall bit
 152   2          *cs_ptr = 0x00;
 153   2        }
 154   1      }
 155          
 156          uint8_t hal_usb_get_address()
 157          {
 158   1        return fnaddr;
 159   1      }
 160          
 161          void hal_usb_endpoint_config(uint8_t ep_num, uint8_t ep_size, hal_usb_cb_endpoint_t endpoint_isr)
 162          {
 163   1        uint8_t xdata *bc_ptr;
 164   1        uint8_t temp = (ep_num & 0x7f) - 1;
 165   1        uint8_t stemp = 1 << (ep_num & 0x7f);
 166   1      
 167   1        // Dummy use of variable to get rid of warning
 168   1        ep_size = 0;
 169   1      
 170   1        if((ep_num & 0x80 ) == 0x80) // MSB set indicates IN endpoint
 171   1        {
 172   2          i_endpoint_in_isr[temp] = endpoint_isr;
 173   2          if(endpoint_isr != NULL)
 174   2          {
 175   3            // Add the callback, enable the interrupt and validate the endpoint
C51 COMPILER V9.55   HAL_USB                                                               10/17/2016 12:49:44 PAGE 4   

 176   3            in_ien |= stemp; 
 177   3            inbulkval |= stemp;
 178   3          }
 179   2          else
 180   2          {
 181   3            // Remove the callback, disable the interrupt and invalidate the endpoint
 182   3            in_ien &= ~stemp;
 183   3            inbulkval &= ~stemp;
 184   3          }
 185   2        }
 186   1        else // OUT endpoint
 187   1        {
 188   2          i_endpoint_out_isr[temp] = endpoint_isr;
 189   2          if(endpoint_isr != NULL)
 190   2          {
 191   3            // Add the callback, enable the interrupt and validate the endpoint
 192   3            out_ien |= stemp;
 193   3            outbulkval |= stemp;
 194   3      
 195   3            // Have to write a dummy value to the OUTxBC register to get interrupts
 196   3            bc_ptr = CALCULATE_BC_OUT_PTR(ep_num);
 197   3            *bc_ptr = 0xff;
 198   3          }
 199   2          else
 200   2          {
 201   3            // Remove the callback, disable the interrupt and invalidate the endpoint
 202   3            out_ien &= ~stemp;
 203   3            outbulkval &= ~stemp;
 204   3          }
 205   2        }
 206   1      }
 207          
 208          void hal_usb_wakeup()
 209          {
 210   1        // We can only issue a wakeup if the host has allowed us to do so
 211   1        if((g_hal_usb.bm_state & USB_BM_STATE_ALLOW_REMOTE_WAKEUP) == USB_BM_STATE_ALLOW_REMOTE_WAKEUP)
 212   1        {
 213   2          USBCON = 0x40;  // Wakeup the USB controller via remote pin
 214   2          delay_ms(1);    // Wait until the USB clock starts
 215   2          USBCON = 0x00;
 216   2        }
 217   1      }
 218          
 219          void hal_usb_reset()
 220          {
 221   1        SWRST = 1;  // Perform a hardware reset of the USB controller
 222   1      }
 223          
 224          #pragma disable
 225          hal_usb_state_t hal_usb_get_state()
 226          {
 227   1        return g_hal_usb.state;
 228   1      }
 229          
 230          void hal_usb_send_data(uint8_t ep_num, uint8_t* array, uint8_t count)
 231          {
 232   1        uint8_t i;
 233   1      
 234   1        uint8_t xdata *buf_ptr;
 235   1        uint8_t xdata *bc_ptr;
 236   1      
 237   1        // Calculate the buffer pointer and byte count pointer
C51 COMPILER V9.55   HAL_USB                                                               10/17/2016 12:49:44 PAGE 5   

 238   1        buf_ptr = CALCULATE_BUF_IN_PTR(ep_num);
 239   1        bc_ptr = CALCULATE_BC_IN_PTR(ep_num);
 240   1      
 241   1        // Copy the data into the USB controller
 242   1        for( i = 0; i < count; i++ )
 243   1        {
 244   2          buf_ptr[i] = array[i];
 245   2        }
 246   1      
 247   1        // Set the number of bytes we want to send to USB-host. This also trigger sending of data to USB-host.
 248   1        *bc_ptr = count;
 249   1      }
 250          
 251          void hal_usb_bus_disconnect()
 252          {
 253   1        usbcs |= 0x08; // disconnect
 254   1      }
 255          
 256          void hal_usb_bus_connect()
 257          {
 258   1        usbcs &= ~(0x08); // connect
 259   1      }
 260          
 261          void hal_usb_sleep()
 262          {
 263   1        USBSLP = 1;
 264   1      }
 265           
 266          static void packetize(uint8_t *data_ptr, uint8_t data_size)
 267          {
 268   1        i_packetizer.data_ptr = data_ptr;
 269   1        i_packetizer.data_size = data_size;
 270   1        i_packetizer.pkt_size = g_hal_usb.descs.dev->bMaxPacketSize0;
 271   1      }
 272          
 273          // This routine is called by functions that shall send their first packet and when the EP0IN interrupt is 
             -set
 274          static void packetizer_isr_ep0_in(void) 
 275          {
 276   1        uint8_t size, i;
 277   1      
 278   1        // We are getting a ep0in interupt when the host send ACK and do not have any more data to send
 279   1        if(i_packetizer.data_size == 0)
 280   1        {        
 281   2          if (stall_data_size0 == 1)
 282   2          {
 283   3              USB_EP0_DSTALL();
 284   3          }
 285   2          else
 286   2          {
 287   3              stall_data_size0 = 1;
 288   3              in0bc = 0;
 289   3              USB_EP0_HSNAK();
 290   3          }       
 291   2          return;
 292   2        }
 293   1      
 294   1        size = MIN(i_packetizer.data_size, i_packetizer.pkt_size);
 295   1      
 296   1        // Copy data to the USB-controller buffer
 297   1        for(i = 0; i < size; i++)
 298   1        {
C51 COMPILER V9.55   HAL_USB                                                               10/17/2016 12:49:44 PAGE 6   

 299   2          in0buf[i] = i_packetizer.data_ptr[i];
 300   2        }
 301   1      
 302   1        if (size < i_packetizer.pkt_size)
 303   1          stall_data_size0 = 1;
 304   1        // Tell the USB-controller how many bytes to send
 305   1        // If a IN is received from host after this the USB-controller will send the data
 306   1        in0bc = size;
 307   1      
 308   1        // Update the packetizer data
 309   1        i_packetizer.data_ptr += size;
 310   1        i_packetizer.data_size -= size;
 311   1      
 312   1        return;
 313   1      }
 314          
 315          /** This function processes the response from the callback */
 316          static void usb_process_dev_req_cb_response(void)
 317          {
 318   1        uint8_t *data_ptr;
 319   1        uint8_t data_size;
 320   1        hal_usb_dev_req_resp_t ret = g_hal_usb.device_req(&req, &data_ptr, &data_size);
 321   1      
 322   1        switch(ret)
 323   1        {
 324   2          case DATA:
 325   2            packetize((uint8_t *)data_ptr, MIN(req.wLength, data_size));
 326   2            packetizer_isr_ep0_in();
 327   2            break;
 328   2          case NO_RESPONSE:
 329   2            break;
 330   2          case EMPTY_RESPONSE:
 331   2          case NAK:
 332   2            USB_EP0_HSNAK();
 333   2            break;
 334   2          case ACK:
 335   2            out0bc = 0xff;
 336   2            break;
 337   2          case STALL:
 338   2          default:
 339   2            USB_EP0_STALL();
 340   2            break;
 341   2          }
 342   1      }
 343          
 344          static void usb_process_get_status(void)
 345          {
 346   1        uint8_t xdata *ptr;
 347   1      
 348   1        if(g_hal_usb.state == ADDRESSED)
 349   1        {
 350   2          if(req.wIndex != 0x00)
 351   2          {
 352   3              USB_EP0_STALL();
 353   3          }
 354   2          else
 355   2          {
 356   3            in0buf[0] = in0buf[1] = 
 357   3              ((g_hal_usb.descs.conf->conf.bmAttributes & 0x40 ) >> 6); // D0 - 0: bus powered, 1: self powered
 358   3            in0bc = 0x02;
 359   3          }
 360   2        }
C51 COMPILER V9.55   HAL_USB                                                               10/17/2016 12:49:44 PAGE 7   

 361   1        else if(g_hal_usb.state == CONFIGURED)
 362   1        {
 363   2          in0buf[1] = 0x00;
 364   2          switch(req.bmRequestType)
 365   2          {
 366   3            case 0x80: // Device
 367   3              if((g_hal_usb.bm_state & USB_BM_STATE_ALLOW_REMOTE_WAKEUP ) == USB_BM_STATE_ALLOW_REMOTE_WAKEUP)
 368   3              {
 369   4                  in0buf[0] = 0x02;
 370   4              }
 371   3              else
 372   3              {
 373   4                  in0buf[0] = 0x00;
 374   4              }
 375   3      
 376   3              in0buf[0] |= ((g_hal_usb.descs.conf->conf.bmAttributes & 0x40 ) >> 6); // D0 - 0: bus powered, 1: 
             -self powered
 377   3              in0bc = 0x02;
 378   3              break;
 379   3            case 0x81: // Interface
 380   3              in0buf[0] = 0x00;
 381   3              in0bc = 0x02;
 382   3              break;
 383   3            case 0x82: // Endpoint
 384   3              if((req.wIndex & 0x80) == 0x80) // IN endpoints
 385   3              {
 386   4                ptr = CALCULATE_CS_IN_PTR(req.wIndex);
 387   4              }
 388   3              else
 389   3              {
 390   4                ptr = CALCULATE_CS_OUT_PTR(req.wIndex);
 391   4              }
 392   3      
 393   3              in0buf[0] = *ptr & 0x01;
 394   3              in0bc = 0x02;
 395   3              break;
 396   3            default:
 397   3              USB_EP0_STALL();
 398   3              break;
 399   3          } // switch(req.bmRequestType) --end--
 400   2        }
 401   1        else
 402   1        {
 403   2          // We should not be in this state
 404   2          USB_EP0_STALL();
 405   2        }
 406   1      }
 407          
 408          static void usb_process_get_descriptor(void)
 409          {
 410   1        // Switch on descriptor type
 411   1        switch(req.wValueMsb)
 412   1        {
 413   2          case USB_DESC_DEVICE:
 414   2            packetize((uint8_t *)g_hal_usb.descs.dev,
 415   2            MIN(req.wLength, sizeof(hal_usb_dev_desc_t)));
 416   2            packetizer_isr_ep0_in();
 417   2            break;
 418   2          case USB_DESC_CONFIGURATION:
 419   2            // For now we just support one configuration. The asked configuration is stored in LSB(wValue).
 420   2            packetize((uint8_t *)g_hal_usb.descs.conf,
 421   2            MIN(req.wLength, sizeof(usb_conf_desc_templ_t)));
C51 COMPILER V9.55   HAL_USB                                                               10/17/2016 12:49:44 PAGE 8   

 422   2            packetizer_isr_ep0_in();
 423   2            break;
 424   2          case USB_DESC_STRING:
 425   2            // For now we just support english as string descriptor language.
 426   2            if(req.wValueLsb == 0x00)
 427   2            {
 428   3              packetize(g_hal_usb.descs.string_zero, MIN(req.wLength, sizeof(g_hal_usb.descs.string_zero)));
 429   3              packetizer_isr_ep0_in();
 430   3            }
 431   2            else
 432   2            {
 433   3              if((req.wValueLsb - 1 ) < USB_STRING_DESC_COUNT)
 434   3              {
 435   4                packetize((uint8_t *)(g_hal_usb.descs.string->idx[req.wValueLsb-1]),
 436   4                MIN(req.wLength, g_hal_usb.descs.string->idx[req.wValueLsb-1][0]));
 437   4                packetizer_isr_ep0_in();
 438   4              }
 439   3              else
 440   3              {
 441   4                USB_EP0_STALL();
 442   4              }
 443   3            }
 444   2            break;
 445   2          case USB_DESC_INTERFACE:
 446   2          case USB_DESC_ENDPOINT:
 447   2          case USB_DESC_DEVICE_QUAL:
 448   2          case USB_DESC_OTHER_SPEED_CONF:
 449   2          case USB_DESC_INTERFACE_POWER:
 450   2            USB_EP0_STALL();
 451   2            break;
 452   2          default:
 453   2            usb_process_dev_req_cb_response();
 454   2            break;
 455   2        }
 456   1      }
 457          
 458          static void isr_sudav(void)
 459          {
 460   1        // Parsing the request into request structure
 461   1        req.bmRequestType = setupbuf[0];
 462   1        req.bRequest = setupbuf[1];
 463   1        req.wValueLsb = setupbuf[2];
 464   1        req.wValueMsb = setupbuf[3];
 465   1        req.wIndex = setupbuf[4];
 466   1        req.wLength = setupbuf[6];
 467   1        if (setupbuf[7] > 0)
 468   1        {
 469   2          req.wLength = 0xff; // We truncate packets requests longer then 255 bytes
 470   2        }
 471   1      
 472   1        // bmRequestType = 0 00 xxxxx : Data transfer direction: Host-to-device Type: Standard
 473   1        if((req.bmRequestType & 0x60) == 0x00)
 474   1        {
 475   2          switch(req.bRequest)
 476   2          {
 477   3            case USB_REQ_GET_DESCRIPTOR:
 478   3              usb_process_get_descriptor();
 479   3              break;
 480   3            case USB_REQ_GET_STATUS:
 481   3              usb_process_get_status();
 482   3              break;           
 483   3            case USB_REQ_CLEAR_FEATURE:
C51 COMPILER V9.55   HAL_USB                                                               10/17/2016 12:49:44 PAGE 9   

 484   3            case USB_REQ_SET_FEATURE: 
 485   3              switch(req.bmRequestType)
 486   3              {
 487   4                case 0x00: // Device
 488   4                  if(req.wValueLsb == USB_DEVICE_REMOTE_WAKEUP)
 489   4                  {
 490   5                    if (req.bRequest == USB_REQ_CLEAR_FEATURE) 
 491   5                      g_hal_usb.bm_state &= ~(USB_BM_STATE_ALLOW_REMOTE_WAKEUP);
 492   5                    else
 493   5                      g_hal_usb.bm_state |= USB_BM_STATE_ALLOW_REMOTE_WAKEUP;
 494   5                    USB_EP0_HSNAK();
 495   5                  }
 496   4                  else
 497   4                  {
 498   5                    USB_EP0_STALL();
 499   5                  }
 500   4                  break;
 501   4      
 502   4                case 0x02: // Endpoint
 503   4                  if(req.wValueLsb == USB_ENDPOINT_HALT)
 504   4                  {
 505   5                    if (req.bRequest == USB_REQ_CLEAR_FEATURE) 
 506   5                      hal_usb_endpoint_stall(req.wIndex, false);
 507   5                    else
 508   5                      hal_usb_endpoint_stall(req.wIndex, true);
 509   5                    USB_EP0_HSNAK();
 510   5                  }
 511   4                  else 
 512   4                  {
 513   5                      USB_EP0_STALL();
 514   5                  }
 515   4                  break;
 516   4                case 0x01: // Interface
 517   4                default:
 518   4                  USB_EP0_STALL();
 519   4                  break;
 520   4              }
 521   3              break;
 522   3      
 523   3            case USB_REQ_SET_ADDRESS:
 524   3              g_hal_usb.state = ADDRESSED;
 525   3              g_hal_usb.current_config = 0x00;
 526   3              break;
 527   3            case USB_REQ_GET_CONFIGURATION:
 528   3              switch(g_hal_usb.state)
 529   3              {
 530   4                case ADDRESSED:
 531   4                  in0buf[0] = 0x00;
 532   4                  in0bc = 0x01;
 533   4                  break;
 534   4                case CONFIGURED:
 535   4                  in0buf[0] = g_hal_usb.current_config;
 536   4                  in0bc = 0x01;
 537   4                  break;
 538   4                default:
 539   4                  USB_EP0_STALL();
 540   4                  break;
 541   4              }
 542   3              break;
 543   3            case USB_REQ_SET_CONFIGURATION:
 544   3              switch(req.wValueLsb)
 545   3              {
C51 COMPILER V9.55   HAL_USB                                                               10/17/2016 12:49:44 PAGE 10  

 546   4                case 0x00:
 547   4                  g_hal_usb.state = ADDRESSED;
 548   4                  g_hal_usb.current_config = 0x00;
 549   4                  USB_EP0_HSNAK();
 550   4                  break;
 551   4                case 0x01:
 552   4                  g_hal_usb.state = CONFIGURED;
 553   4                  g_hal_usb.bm_state |= USB_BM_STATE_CONFIGURED;
 554   4                  g_hal_usb.current_config = 0x01;
 555   4                  USB_EP0_HSNAK();
 556   4                  break;
 557   4                default:
 558   4                  USB_EP0_STALL();
 559   4                  break;
 560   4              }
 561   3              break;
 562   3            case USB_REQ_GET_INTERFACE: // GET_INTERFACE
 563   3              in0buf[0] = g_hal_usb.current_alt_interface;
 564   3              in0bc = 0x01;
 565   3              break;
 566   3            case USB_REQ_SET_DESCRIPTOR:
 567   3            case USB_REQ_SET_INTERFACE: // SET_INTERFACE (We do not support this)
 568   3            case USB_REQ_SYNCH_FRAME:   // SYNCH_FRAME (We do not support this)
 569   3            default:
 570   3             USB_EP0_STALL();
 571   3             break;
 572   3          };
 573   2        } 
 574   1        // bmRequestType = 0 01 xxxxx : Data transfer direction: Host-to-device, Type: Class
 575   1        else if((req.bmRequestType & 0x60 ) == 0x20)  // Class request
 576   1        {
 577   2          if(req.wLength != 0 && ((req.bmRequestType & 0x80) == 0x00))
 578   2          {
 579   3            // If there is a OUT-transaction associated with the Control-Transfer-Write we call the callback
 580   3            // when the OUT-transaction is finished. Note that this function do not handle several out transacti
             -ons.
 581   3            out0bc = 0xff;
 582   3          }
 583   2          else
 584   2          {
 585   3            usb_process_dev_req_cb_response();
 586   3          }
 587   2          // Call the callback function. Data to be sent back to the host is store by the callback in data_ptr a
             -nd the size in data_size.
 588   2        } 
 589   1        else  // Unknown request type
 590   1        {
 591   2          USB_EP0_STALL();
 592   2        }
 593   1      }
 594          
 595          static void isr_suspend(void)
 596          {
 597   1        uint8_t allow_remote_wu = 0;
 598   1        g_hal_usb.bm_state &= ~(USB_BM_STATE_HOST_WU); // We clear the flag that indicates that the host awoke t
             -he MCU via USB here
 599   1      
 600   1        if( g_hal_usb.state == CONFIGURED )
 601   1        {
 602   2          if( ( g_hal_usb.bm_state & USB_BM_STATE_ALLOW_REMOTE_WAKEUP ) == USB_BM_STATE_ALLOW_REMOTE_WAKEUP )
 603   2          {
 604   3            allow_remote_wu = 1;
C51 COMPILER V9.55   HAL_USB                                                               10/17/2016 12:49:44 PAGE 11  

 605   3          }
 606   2        }
 607   1      
 608   1        g_hal_usb.state = SUSPENDED;
 609   1      
 610   1        if( g_hal_usb.suspend != NULL )
 611   1        {
 612   2          g_hal_usb.suspend(allow_remote_wu);
 613   2        }
 614   1      }
 615          
 616          static void isr_usbreset(void)
 617          {
 618   1        g_hal_usb.state = DEFAULT;
 619   1        g_hal_usb.current_config = 0;
 620   1        g_hal_usb.current_alt_interface = 0;
 621   1        g_hal_usb.bm_state = 0;
 622   1        if( g_hal_usb.reset != NULL ) g_hal_usb.reset();
 623   1      }
 624          
 625          
 626          USB_WU_ISR() // address: 0x005b
 627          {
 628   1      #define ICH4
 629   1        #ifdef ICH4
 630   1        uint8_t t;
 631   1        #endif
 632   1      
 633   1        // Check if the wakeup source is the pin to the USB controller
 634   1        // If it is by the pin to the USB controller we want to start
 635   1        // a remote wakeup
 636   1        if( ( usbcs & 0x80 ) == 0x80 )
 637   1        {
 638   2          // Reset the wakesrc indicator
 639   2          usbcs = 0x80;
 640   2      
 641   2          // If we are allowed to perform a remote wakeup do that
 642   2          if( ( g_hal_usb.bm_state & USB_BM_STATE_ALLOW_REMOTE_WAKEUP ) == USB_BM_STATE_ALLOW_REMOTE_WAKEUP )
 643   2          {
 644   3        #ifdef ICH4
 645   3            // Force the J state on the USB lines
 646   3            usbcs |= 0x02;
 647   3      
 648   3            // Typical 5.4us delay
 649   3            _nop_();
 650   3            _nop_();
 651   3      
 652   3            t = usbcs;
 653   3      
 654   3            // Stop J state on the USB lines
 655   3            t &= ~0x02;
 656   3      
 657   3            // Signal remote resume
 658   3            t |= 0x01;
 659   3      
 660   3            // We have to set this register in one operation to avoid
 661   3            // idle state is restored between the forced J and resume state
 662   3            usbcs = t;
 663   3      #else
                    usbcs |= 0x01;  // Turn on the resume signal on the USB bus
              #endif
 666   3            delay_ms(7); //.1.7.7 Resume: The remote wakeup device must hold the resume signaling for at 
C51 COMPILER V9.55   HAL_USB                                                               10/17/2016 12:49:44 PAGE 12  

 667   3                          // least 1 ms but for no more than 15ms
 668   3      
 669   3            usbcs &= ~0x01; // Turn off the resume signal on the USB bus
 670   3          }
 671   2        }
 672   1        else 
 673   1        {
 674   2          // We are awoken by the bus
 675   2          g_hal_usb.bm_state |= USB_BM_STATE_HOST_WU;
 676   2        }
 677   1      
 678   1        if((g_hal_usb.bm_state & USB_BM_STATE_CONFIGURED ) == USB_BM_STATE_CONFIGURED)
 679   1        {
 680   2          g_hal_usb.state = CONFIGURED;
 681   2        }
 682   1        else
 683   1        {
 684   2          g_hal_usb.state = DEFAULT;
 685   2        }
 686   1      
 687   1        // Call resume callback
 688   1        g_hal_usb.resume();
 689   1      }
 690          
 691          // This function processes the response from the EP callback
 692          static void usb_process_ep_response(uint8_t ret, uint8_t xdata* cs_ptr, uint8_t xdata* bc_ptr)
 693          {
 694   1        if( ret == 0xff ) // Clear the OUTx busy flag enabling reception of the next OUT from USB-host
 695   1        {
 696   2          *bc_ptr = 0xff;
 697   2        }
 698   1        else if( ( ret & 0x80 ) == 0x80 )  // STALL
 699   1        {
 700   2          *cs_ptr = 0x01;
 701   2        }
 702   1        else if( ( ret & 0x60 ) == 0x60 ) // NAK
 703   1        {
 704   2          *cs_ptr = 0x02;
 705   2        }
 706   1        else if( ret == 0 ) // Zero length data
 707   1        {
 708   2          *bc_ptr = 0;
 709   2        }
 710   1        else
 711   1        {
 712   2          *bc_ptr = ret;
 713   2        }
 714   1      }
 715          
 716          USB_ISR()
 717          {
 718   1        uint8_t ep;
 719   1        uint8_t ret;
 720   1        uint8_t xdata *cs_ptr;
 721   1        uint8_t xdata *buf_ptr;
 722   1        uint8_t xdata *bc_ptr;
 723   1      
 724   1        switch(ivec)
 725   1        {
 726   2          case INT_SUDAV:
 727   2            usbirq = 0x01;
 728   2            isr_sudav();
C51 COMPILER V9.55   HAL_USB                                                               10/17/2016 12:49:44 PAGE 13  

 729   2            break;
 730   2          case INT_SOF:
 731   2            usbirq = 0x02;
 732   2            break;
 733   2          case INT_SUTOK:
 734   2            usbirq = 0x04;
 735   2            i_packetizer.data_ptr = NULL;
 736   2            i_packetizer.data_size = 0;
 737   2            i_packetizer.pkt_size = 0;
 738   2            stall_data_size0 = 0;
 739   2            break;
 740   2          case INT_SUSPEND:
 741   2            usbirq = 0x08;
 742   2            isr_suspend();
 743   2            break;
 744   2          case INT_USBRESET:
 745   2            usbirq = 0x10;
 746   2            isr_usbreset();
 747   2            break;
 748   2          case INT_EP0IN:
 749   2            in_irq = 0x01;
 750   2            packetizer_isr_ep0_in();
 751   2            break;
 752   2          case INT_EP0OUT:
 753   2            out_irq = 0x01;
 754   2            i_packetizer.data_size = 0;
 755   2            usb_process_dev_req_cb_response();
 756   2            break;
 757   2            case INT_EP1IN:
 758   2            case INT_EP2IN:
 759   2            case INT_EP3IN:
 760   2            case INT_EP4IN:
 761   2            case INT_EP5IN:
 762   2              // Calculate IN endpoint number
 763   2              ep = (ivec - INT_EP0IN ) >> 3;// INT_EP2IN - INT_EP1IN == 8 ;   
 764   2              // Clear interrupt 
 765   2              in_irq = ( 1 << ep );
 766   2      
 767   2              cs_ptr = CALCULATE_CS_IN_PTR(ep);
 768   2              buf_ptr = CALCULATE_BUF_IN_PTR(ep);
 769   2              bc_ptr = CALCULATE_BC_IN_PTR(ep);
 770   2          
 771   2              // Call registered callback
 772   2              ret = i_endpoint_in_isr[ep - 1](buf_ptr, bc_ptr);
 773   2              usb_process_ep_response(ret, cs_ptr, bc_ptr);
 774   2              break;
 775   2            case INT_EP1OUT:
 776   2            case INT_EP2OUT:
 777   2            case INT_EP3OUT:
 778   2            case INT_EP4OUT:
 779   2            case INT_EP5OUT:
 780   2              // Calculate OUT endpoint number
 781   2              ep = (ivec - INT_EP0OUT) >> 3;          // INT_EP2OUT - INT_EP1OUT == 8
 782   2      
 783   2              // Clear interrupt
 784   2              out_irq = ( 1 << ep );
 785   2              
 786   2              cs_ptr = CALCULATE_CS_OUT_PTR(ep);
 787   2              buf_ptr = CALCULATE_BUF_OUT_PTR(ep);
 788   2              bc_ptr = CALCULATE_BC_OUT_PTR(ep);
 789   2      
 790   2              // Call registered callback
C51 COMPILER V9.55   HAL_USB                                                               10/17/2016 12:49:44 PAGE 14  

 791   2              ret = (i_endpoint_out_isr[ep - 1])(buf_ptr, bc_ptr);
 792   2              usb_process_ep_response(ret, cs_ptr, bc_ptr);
 793   2              break;
 794   2          default:
 795   2            break;
 796   2        };
 797   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3053    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     71      43
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
